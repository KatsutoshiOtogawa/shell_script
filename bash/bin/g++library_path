#!/bin/bash
#
# gnu command util.

#######################################
# check g++ library_path g++ compiler search.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   g++ search libary_path.
# Returns:
#   0 if exists gnu commands, non-zero on error.
# Example:
#   library_path # => show
#######################################
function g++library_path {
  # set gnu alias.
  source $(dirname $0)/../function/gnu_alias
  if ! gnu_alias; then
    return 1;
  fi

  # check command for shellscript
  if ! command -v g++ > /dev/null; then
      echo "g++ is not exists. install g++!" >&2
      return 1
  fi
  if ! command -v realpath > /dev/null; then
      echo "realpath is not exists. install realpath!" >&2
      return 1
  fi 
  # 
  # xargs only line, delete blank line.
  g++ -print-search-dirs | \
    grep libraries | \
    sed 's/libraries: =//' | \
    xargs -d ':' -n 1 realpath 2> /dev/null | \
    xargs -n 1 | \
    sed 's|/$||' | \
    sort | uniq

}

function usage() {
    cat 1>&2 <<EOF
search_engine
output search engine setting

USAGE:
    g++library_path [FLAGS] [OPTIONS]

FLAGS:
    -h, --help              Prints help information

OPTIONS:
    --debug                 Set bash debug Option
    --district              If you error occured and not catched, forcfully return. this flag use debug.
    --check-grammer         check bash grammer
    --time                  calculate execute time
EOF
}

function main {

  local i
  local timef=1
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    if [ "${new_array[$i]}" = "--help" ] || [ "${new_array[$i]}" = "-h" ]; then
      usage
      return
    fi
    if [ "${new_array[$i]}" = "--check-grammer" ]; then
      bash -n $(dirname $0)/${BASH_SOURCE[0]}
      return
    fi
    # set time flag for calculate script time.
    if [ "${new_array[$i]}" = "--time" ]; then
      timef=0
      unset new_array[$i]
    fi
    # if find --debug flag from args, start debug mode.
    if [ "${new_array[$i]}" = "--debug" ]; then
      set -x
      trap "
        set +x
        trap - RETURN
      " RETURN
      unset new_array[$i]
    fi
  done
  # reindex assign.
  new_array=${new_array[@]}

  if [ "$timef" -eq "0" ]; then
    time g++library_path $new_array
  else
    g++library_path $new_array
  fi
}

main $@
