#!/bin/bash
#
# gnu command util.

#######################################
# g++ find library_file from g++ compiler path
# Globals:
#   GNU_ALIAS
# Arguments:
#   library_file: assigned file.
# Outputs:
#   g++ search libary_path.
# Returns:
#   0 if find library, non-zero on error or not found library.
# Example:
#   g++find_library libboost_program_options => show /usr/lib/x86_64-linux-gnu/libboost_program_options.a and /usr/lib/x86_64-linux-gnu/libboost_program_options.so
#######################################
function g++find_library {

  local detail
  local i
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    # if find --fields flag from args, open 
    if [ "${new_array[$i]}" = "--detail" ] || [ "${new_array[$i]}" = "-d" ]; then
      detail=yes
      unset new_array[$i]
    fi
  done

  # reindex
  new_array=${new_array[@]}
  local library_file=${new_array[0]}
  # if $library_file not exists, return function.
  if [ -z $library_file ]; then
      echo "args library_file is not exists." >&2
      return 1
  fi

  # library_file=${library_file//(\.so|\.a)//}

  # set gnu alias.
  if [ -z $GNU_ALIAS ]; then
    if ! source $(which gnu_alias); then
      return 1;
    fi
  fi

  local library_files=$(
    g++library_path | \
      while read line; do
        if [ -e $line ]; then
          find $line -name "${library_file}.so" \
                      -or -name "lib${library_file}.so" \
                      -or -name "${library_file}.a" \
                      -or -name "lib${library_file}.a" \
                      -or -name "${library_file}" \
                      -or -name "lib${library_file}" | \
          awk -F$line -v detail="${detail}" '{
            if(detail){
              print "libralypath:" FS "::" "library:" $2
            }else{
              print FS $2
            }
          }' | \
          sed 's|library:/|library:|'
        fi
      done | \
      sort | uniq
  )
  if [ -z "${library_files}" ]; then
    return 1
  fi

  # out put match files.
  echo "${library_files[@]}" | awk -v detail="${detail}" '{
    if(detail){
      sub("::", " ", $0)
    }
    print $0
  }'
}

function usage() {
    cat 1>&2 <<EOF
g++find_library
output search engine setting

USAGE:
    g++find_library [FLAGS] [OPTIONS]

FLAGS:
    -d, --detail            Show include path, and path hierarchy
    -h, --help              Prints help information

OPTIONS:
    --debug                 Set bash debug Option
EOF
}

function main {

  local i
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    if [ "${new_array[$i]}" = "--help" ] || [ "${new_array[$i]}" = "-h" ]; then
      usage
      return
    fi
    # if find --debug flag from args, start debug mode.
    if [ "${new_array[$i]}" = "--debug" ]; then
      set -x
      trap "
        set +x
        trap - RETURN
      " RETURN
      unset new_array[$i]
    fi
  done
  # reindex assign.
  new_array=${new_array[@]}

  g++find_library $new_array
}

main $@
