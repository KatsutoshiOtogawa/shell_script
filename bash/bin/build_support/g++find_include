#!/bin/bash
#
# gnu command util.

#######################################
# g++ find include_file from g++ compiler path
# Globals:
#   None
# Arguments:
#   include_file: assigned file.
# Outputs:
#   g++ search include_path.
# Returns:
#   0 if find library, non-zero on error or not found library.
# Example:
#   g++find_include libsodium.so => show
#######################################
function g++find_include {

  if ! source $(which gnu_alias); then
    return 1;
  fi

  local detail
  local i
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    # if find --fields flag from args, open 
    if [ "${new_array[$i]}" = "--detail" ] || [ "${new_array[$i]}" = "-d" ]; then
      detail=yes
      unset new_array[$i]
    fi
  done

  # reindex
  new_array=${new_array[@]}
  local include_file=${new_array[0]}
  # if $library_file not exists, return function.
  if [ -z $include_file ]; then
      echo "args include_file is not exists." >&2
      return 1
  fi

  # include file *.h or *.hpp
  if [[ ! $include_file =~ \.h$ ]] && [[ ! $include_file =~ \.hpp$ ]]; then
    echo "set include file! invalid extension file!"
    return 1
  fi

  local include_files=$(
    g++include_path | \
    while read line; do
      if [ -e $line ]; then

        find $line -name ${include_file} | \
        awk -F$line -v detail="${detail}" '{
          if(detail){
            print "includepath:" FS "::" "include:" $2
          }else{
            print FS $2
          }
        }' | \
        sed 's|include:/|include:|'
      fi
    done | \
    sort | uniq
  )
  # if doesn't match path, return 1
  if [ -z "${include_files}" ]; then
    return 1
  fi

  # out put match files.
  # escape for echo :: -> " "
  echo "${include_files[@]}" | awk -v detail="${detail}" '{
    if(detail){
      sub("::", " ", $0)
    }
    print $0
  }'
}

function usage() {
    cat 1>&2 <<EOF
g++find_include
output search engine setting

USAGE:
    g++find_include [FLAGS] [OPTIONS]

FLAGS:
    -d, --detail            Show include path, and path hierarchy
    -h, --help              Prints help information

OPTIONS:
    --debug                 Set bash debug Option
EOF
}

function main {

  local i
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    if [ "${new_array[$i]}" = "--help" ] || [ "${new_array[$i]}" = "-h" ]; then
      usage
      return
    fi
    # if find --debug flag from args, start debug mode.
    if [ "${new_array[$i]}" = "--debug" ]; then
      set -x
      trap "
        set +x
        trap - RETURN
      " RETURN
      unset new_array[$i]
    fi
  done
  # reindex assign.
  new_array=${new_array[@]}

  g++find_include $new_array
}

main $@
