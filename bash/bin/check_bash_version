#!/bin/bash
#
# Comment, .env, file utils

#######################################
# write stderr syntax. google style(https://google.github.io/styleguide/shellguide.html)
# Globals:
#   BASH_VERSION
#   BASH_VERSION_MIN_SUPPORT
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   0 if correct version bash, non-zero on old version bash you use.
# Example:
#  check_bash_version #=> 1 you use old version bash
#######################################
function check_bash_version {
  # set gnu alias.
  if [ -z $GNU_ALIAS ]; then
    if ! source $(which gnu_alias); then
      return 1;
    fi
  fi
  
  local min_support=$BASH_VERSION_MIN_SUPPORT
  # if BASH_VERSION_MIN_SUPPORT not exists, require for bash version 5.
  if [ $min_support -z ]; then
    min_support=5
  fi
  local version=`echo $BASH_VERSION | cut -c -1`

  if [ $version -lt $min_support ]; then
    echo "you use old version bash. use greater ${min_support} version" >&2
    return 1;
  fi
}

function usage() {
    cat 1>&2 <<EOF
search_engine
output search engine setting

USAGE:
    search_engine [FLAGS] [OPTIONS]

FLAGS:
    -l, --list              Show usable search engines.
    -d, --detail            Show search engine detail
    -h, --help              Prints help information

OPTIONS:
    --debug                 Set bash debug Option
EOF
}

function main {

  local i
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    if [ "${new_array[$i]}" = "--help" ] || [ "${new_array[$i]}" = "-h" ]; then
      usage()
      return
    fi
    # if find --debug flag from args, start debug mode.
    if [ "${new_array[$i]}" = "--debug" ]; then
      set -x
      trap "
        set +x
        trap - RETURN
      " RETURN
      unset new_array[$i]
    fi
  done
  # reindex assign.
  new_array=${new_array[@]}

  check_bash_version $new_array
}

main $@
