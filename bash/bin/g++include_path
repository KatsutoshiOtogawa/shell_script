#!/bin/bash
#
# gnu command util.

#######################################
# check g++ include_path g++ compiler search.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   g++ search include_path.
# Returns:
#   0 if exists gnu commands, non-zero on error.
# Example:
#   include_path # => show
#######################################
function g++include_path () {
  # set gnu alias.
  source $(dirname $0)/../function/gnu_alias
  if ! gnu_alias; then
    return 1;
  fi
  local tmpfile=$(mktemp)
  # remove temporary file return function 
  trap "
    rm ${tmpfile}
    trap - RETURN
  " RETURN

  # output value 
  g++ -x c++ -v -E /dev/null > /dev/null 2> $tmpfile

  local line_num=$(cat ${tmpfile} | wc -l)
  # ファイルで全検索のデータから判断する。
  cat $tmpfile | \
    grep -A $line_num "include .* search starts" | \
    grep -B $line_num "End of search list" | \
    grep -v "include .* search starts" | \
    grep -v "End of search list"  | \
    sed 's/ //g'
}

function usage() {
    cat 1>&2 <<EOF
g++include_path
output search engine setting

USAGE:
    g++include_path [FLAGS] [OPTIONS]

FLAGS:
    -h, --help              Prints help information

OPTIONS:
    --debug                 Set bash debug Option
    --district              If you error occured and not catched, forcfully return. this flag use debug.
    --check-grammer         check bash grammer
    --time                  calculate execute time
EOF
}

function main {

  local i
  local timef=1
  local new_array=( $@ )
  for ((i=0;i<$#;i++)); do
    if [ "${new_array[$i]}" = "--help" ] || [ "${new_array[$i]}" = "-h" ]; then
      usage
      return
    fi
    if [ "${new_array[$i]}" = "--check-grammer" ]; then
      bash -n $(dirname $0)/${BASH_SOURCE[0]}
      return
    fi
    # set time flag for calculate script time.
    if [ "${new_array[$i]}" = "--time" ]; then
      timef=0
      unset new_array[$i]
    fi
    # if find --debug flag from args, start debug mode.
    if [ "${new_array[$i]}" = "--debug" ]; then
      set -x
      trap "
        set +x
        trap - RETURN
      " RETURN
      unset new_array[$i]
    fi
  done
  # reindex assign.
  new_array=${new_array[@]}

  if [ "$timef" -eq "0" ]; then
    time g++include_path $new_array
  else
    g++include_path $new_array
  fi
}

main $@
